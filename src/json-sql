#!/usr/bin/env python3


import datetime
import decimal
import json
import os
import platform 
import sqlite3
import sys

import cx_Oracle
import pymysql
import psycopg2

def jsonable(o):
    if type(o) in [str, int, float, bool, type(None)]:
        return o
    elif type(o) in [datetime.datetime]:
        return o.isoformat()
    elif type(o) in [list]:
        return [jsonable(e) for e in o]
    elif type(o) in [dict]:
        return {str(k): jsonable(o[k]) for k in o}
    elif type(o) in [decimal.Decimal]:
        return float(o)
    else:
        raise Exception(
            "Cannot make object jsonable:{}:{}".format(str(type(o)), str(o)))


def make_table(data, columns):
    def make_dict(keys, values):
        if len(keys) != len(values):
            raise Exception("Cannot make_dict: {}".format(
                {"keys": keys, "values": values}))
        return {keys[i]: values[i] for i in range(len(keys))}

    return [make_dict(columns, row) for row in data]


class DB:
    connection = None

    def execute_query(self, query_string):
        def cursor_has_results(cursor):
            # DB API 2.0 states that when the cursor does not return results
            # exactly when cursor.description is None.
            return bool(cursor.description)

        cursor = self.connection.cursor()
        cursor.execute(query_string)
        self.connection.commit()

        if cursor_has_results(cursor):
            return [list(r) for r in cursor.fetchall()]
        # If the cursor does not have results, assume it returns a row count
        return cursor.rowcount

    def read_table(self, table_name):
        columns = self._column_names(table_name)
        data = self.execute_query("select * from {};".format(table_name))
        return make_table(data, columns)

    def read_tables(self):
        # pylint: disable=not-an-iterable
        return {name: self.read_table(name) for name in self._table_names()}

    def read(self):
        return jsonable(self.read_tables())

    @staticmethod
    def get_type(command):
        TYPES = [SQLITE3, PSQL, MYSQL, ORACLEADB]
        possible_t = [t for t in TYPES if t.__name__ == command.upper()]

        if possible_t == []:
            raise Exception("No type found for: {}".format(command))
        elif len(possible_t) > 1:
            raise Exception("More than one type found for: {}".format(command))

        return possible_t[0]

    # pylint: disable=unused-argument,no-self-use
    def _column_names(self, table_name):
        return NotImplementedError

    # pylint: disable=no-self-use
    def _table_names(self):
        return NotImplementedError

class ORACLEADB(DB):
    def __init__(self, user, password, schema, tnsname, lib_dir=None):
        # check for TNS_ADMIN environment variable
        # this should be the path to the wallet directory
        # and must be set. I'm checking it manually and 
        # raising an exception if it is missing to avoid the 
        # somewhat misleading and ambiguous exception that Oracle
        # would otherwise throw (ORA-12154: TNS:could not resolve the connect identifier specified)
        if os.environ['TNS_ADMIN'] == "":
            raise Exception("Please set the TNS_ADMIN environment variable to the path of your Autonomous DB wallet.")
        if lib_dir is not None and platform.platform()[:6] == 'Darwin':
            cx_Oracle.init_oracle_client(lib_dir)
        self.connection = cx_Oracle.connect(user, password, tnsname)
        self.schema = schema
   
    def read_table(self, table_name):
        columns = self._column_names(table_name)
        data = self.execute_query("select * from {}".format(table_name))
        return make_table(data, columns)

    def _column_names(self, table_name):
        names = self.execute_query(
            "select column_name from all_tab_columns where table_name = '{}'".format(table_name))
        return [n[0] for n in names]

    def _table_names(self):
        return [t[0] for t in self.execute_query("select table_name from all_tables where num_rows > 1 and tablespace_name = '{}'".format(self.schema))]


class SQLITE3(DB):
    def __init__(self, filename):
        self.connection = sqlite3.connect(filename)

    def _column_names(self, table_name):
        columns = self.execute_query(
            "pragma table_info({});".format(table_name))
        return [column[1] for column in columns]

    def _table_names(self):
        master_table = self.read_table("sqlite_master")
        return [e["name"] for e in master_table if e["type"] == "table"]


class PSQL(DB):
    # pylint: disable=not-an-iterable
    # If 1 arg passed to constructor, its a connection string, otherwise it's a user
    def __init__(self, user_or_connection_string, password = None, host = None, port = None, database = None):
        if password is None:
            connection_string = user_or_connection_string
            self.connection = psycopg2.connect(connection_string)
        else:
            user = user_or_connection_string
            self.connection = psycopg2.connect(
                user=user,
                password=password,
                host=host,
                port=port,
                database=database)

    def _column_names(self, table_name):
        names = self.execute_query(
            "select column_name from information_schema.columns where table_name = '{}';".format(table_name))
        return [n[0] for n in names]

    def _table_names(self):
        return [t[0] for t in self.execute_query("select table_name from information_schema.tables where table_schema = 'public';")]


class MYSQL(DB):
    def __init__(self, user, password, host, database):
        self.database = database
        self.connection = pymysql.connect(
            host,
            user,
            password,
            database)

    def _column_names(self, table_name):
        return self.execute_query("select column_name from information_schema.columns where table_name = '{}';".format(table_name))[0]

    def _table_names(self):
        return [t[0] for t in self.execute_query("select table_name from information_schema.tables where table_schema = '{}';".format(self.database))]


def help_message():
    return \
        """
Usage: json-sql COMMAND DB_TYPE CREDENTIALS

Overview:
    json-sql makes it easy to read/write data to/from a sql database in the command line. It intentionally lacks many features that can be easily achieved with other programs.

COMMAND:
    read - reads the entire database and dumps it as json on stdout.

    query - execute queries passed in as a json array on stdin and returns the results as a json array on stdout. For queries with results, the output is the result. For queries without result, the output is the number of rows affected.

DB_TYPE:
    psql - PostgreSQL
    mysql - MySQL
    sqlite3 - Sqlite3
    oracleadb - Oracle Autonomous DB (requires Oracle Instant Client https://www.oracle.com/database/technologies/instant-client.html)

CREDENTIALS:
    The credentials depends on the db type and some take more than one credential type:
        psql
            user password host port database
            connection-url
        mysql
            user password host port database
        sqlite3
            filename
        oracleadb
            user password schemaname tnsname path_to_instant_client (optional - used on MacOS, otherwise set ENV var as appropriate)

Example usages:
    Read from a psql DB:
        json-sql read psql user password localhost 5432 db
        json-sql read psql postgres://postgres:password@localhost:5432/postgres

    Read from a mysql DB:
        json-sql read mysql user password localhost 3306 db

    Read from a sqlite3 DB:
        json-sql read sqlite3 db.sqlite

    Read from an Oracle Autonomous DB:
        json-sql read oracleadb demo MyStr0ngPa$$w0rd DATA demodb_low /projects/resources/instantclient_19_3

    Insert data into a mysql DB:
        echo ["insert into table (a,b,c) values(1, 2, 3);"] | json-sql query mysql user password localhost 3306 db

    Insert data into Oracle Autonomous DB:
        echo ["insert into table (a,b,c) values (1,2,3)"] | json-sql query oracleadb demo MyStr0ngPa$$w0rd DATA demodb_low /projects/resources/instantclient_19_3

Example advanced usage with other programs:
    Read a specific table from a psql DB:
        json-sql read psql user password localhost 5432 db | jq '.table'

    Delete a list of ids from a psql DB:
        echo '[1, 2, 3, 4]' | jq "[\"delete from json_nosql_db where id in (\" + join(\",\") + \");\"]" | json-sql query psql user password localhost 5432 db
"""


def main():
    if len(sys.argv) < 4:
        print(help_message(), end="")
        return

    method = sys.argv[1]
    db_type_s = sys.argv[2]
    # Credential length varies depending on db type
    credentials = sys.argv[3:]
    db = DB.get_type(db_type_s)(*credentials)

    if method == "read":
        print(json.dumps(db.read()))
    elif method == "query":
        queries = json.load(sys.stdin)
        print(json.dumps([db.execute_query(query) for query in queries], default=jsonable))
    else:
        print(help_message(), end="")
    return


if __name__ == "__main__":
    main()
